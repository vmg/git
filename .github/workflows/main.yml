name: CI/PR

on: [push, pull_request]

env:
  DEVELOPER: 1

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: download git-sdk-64-minimal
      shell: bash
      run: a=git-sdk-64-minimal && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: build
      shell: powershell
      env:
        HOME: ${{runner.workspace}}
        MSYSTEM: MINGW64
        NO_PERL: 1
      run: |
        & .\git-sdk-64-minimal\usr\bin\bash.exe -lc @"
        printf '%s\n' /git-sdk-64-minimal/ >>.git/info/exclude

          ci/make-test-artifacts.sh artifacts
        "@
    - name: upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: windows-artifacts
        path: artifacts
  windows-test:
    runs-on: windows-latest
    needs: [windows-build]
    strategy:
      matrix:
        nr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
    - uses: actions/checkout@v1
    - name: download git-sdk-64-minimal
      shell: bash
      run: a=git-sdk-64-minimal && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: windows-artifacts
        path: ${{github.workspace}}
    - name: extract build artifacts
      shell: bash
      run: tar xf artifacts.tar.gz
    - name: test
      shell: powershell
      run: |
        & .\git-sdk-64-minimal\usr\bin\bash.exe -lc @"
          # Let Git ignore the SDK
          printf '%s\n' /git-sdk-64-minimal/ >>.git/info/exclude

          ci/run-test-slice.sh ${{matrix.nr}} 10
        "@
    - name: ci/print-test-failures.sh
      if: failure()
      shell: powershell
      run: |
        & .\git-sdk-64-minimal\usr\bin\bash.exe -lc ci/print-test-failures.sh
    - name: Upload failed tests' directories
      if: failure() && env.FAILED_TEST_ARTIFACTS != ''
      uses: actions/upload-artifact@v1
      with:
        name: failed-tests-windows
        path: ${{env.FAILED_TEST_ARTIFACTS}}
  vs-build:
    env:
      MSYSTEM: MINGW64
      NO_PERL: 1
      GIT_CONFIG_PARAMETERS: "'user.name=CI' 'user.email=ci@git'"
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: download git-sdk-64-minimal
      shell: bash
      run: a=git-sdk-64-minimal && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: generate Visual Studio solution
      shell: powershell
      run: |
        & .\git-sdk-64-minimal\usr\bin\bash.exe -lc @"
          make NDEBUG=1 DEVELOPER=1 vcxproj
        "@
        if (!$?) { exit(1) }
    - name: download vcpkg artifacts
      shell: powershell
      run: |
        $urlbase = "https://dev.azure.com/git/git/_apis/build/builds"
        $id = ((Invoke-WebRequest -UseBasicParsing "${urlbase}?definitions=9&statusFilter=completed&resultFilter=succeeded&`$top=1").content | ConvertFrom-JSON).value[0].id
        $downloadUrl = ((Invoke-WebRequest -UseBasicParsing "${urlbase}/$id/artifacts").content | ConvertFrom-JSON).value[0].resource.downloadUrl
        (New-Object Net.WebClient).DownloadFile($downloadUrl, "compat.zip")
        Expand-Archive compat.zip -DestinationPath . -Force
        Remove-Item compat.zip
    - name: add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0
    - name: MSBuild
      run: msbuild git.sln -property:Configuration=Release -property:Platform=x64 -maxCpuCount:4 -property:PlatformToolset=v142
    - name: bundle artifact tar
      shell: powershell
      env:
        MSVC: 1
        VCPKG_ROOT: ${{github.workspace}}\compat\vcbuild\vcpkg
      run: |
        & compat\vcbuild\vcpkg_copy_dlls.bat release
        if (!$?) { exit(1) }
        & git-sdk-64-minimal\usr\bin\bash.exe -lc @"
          mkdir -p artifacts &&
          eval \"`$(make -n artifacts-tar INCLUDE_DLLS_IN_ARTIFACTS=YesPlease ARTIFACTS_DIRECTORY=artifacts 2>&1 | grep ^tar)\"
        "@
    - name: upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: vs-artifacts
        path: artifacts
  vs-test:
    runs-on: windows-latest
    needs: [vs-build]
    strategy:
      matrix:
        nr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
    - uses: actions/checkout@v1
    - name: download git-64-portable
      shell: bash
      run: a=git-64-portable && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: vs-artifacts
        path: ${{github.workspace}}
    - name: extract build artifacts
      shell: bash
      run: tar xf artifacts.tar.gz
    - name: test (parallel)
      shell: powershell
      env:
        MSYSTEM: MINGW64
        NO_SVN_TESTS: 1
        GIT_TEST_SKIP_REBASE_P: 1
      run: |
        & git-64-portable\git-cmd.exe --command=usr\bin\bash.exe -lc @"
          # Let Git ignore the SDK and the test-cache
          printf '%s\n' /git-64-portable/ /test-cache/ >>.git/info/exclude

          cd t &&
          PATH=\"`$PWD/helper:`$PATH\" &&
          test-tool.exe run-command testsuite --jobs=10 -V -x --write-junit-xml \
                  `$(test-tool.exe path-utils slice-tests \
                          ${{matrix.nr}} 10 t[0-9]*.sh)
        "@
  regular:
    strategy:
      matrix:
        vector:
          - jobname: linux-clang
            cc: clang
            pool: ubuntu-latest
          - jobname: linux-gcc
            cc: gcc
            pool: ubuntu-latest
          - jobname: osx-clang
            cc: clang
            pool: macos-latest
          - jobname: osx-gcc
            cc: gcc
            pool: macos-latest
          - jobname: GETTEXT_POISON
            cc: gcc
            pool: ubuntu-latest
    env:
      CC: ${{matrix.vector.cc}}
      jobname: ${{matrix.vector.jobname}}
    runs-on: ${{matrix.vector.pool}}
    steps:
    - uses: actions/checkout@v1
    - run: ci/install-dependencies.sh
    - run: ci/run-build-and-tests.sh
    - run: ci/print-test-failures.sh
      if: failure()
    - name: Upload failed tests' directories
      if: failure() && env.FAILED_TEST_ARTIFACTS != ''
      uses: actions/upload-artifact@v1
      with:
        name: failed-tests-${{matrix.vector.jobname}}
        path: ${{env.FAILED_TEST_ARTIFACTS}}
  dockerized:
    strategy:
      matrix:
        vector:
        - jobname: linux-musl
          image: alpine
        - jobname: Linux32
          image: daald/ubuntu32:xenial
    env:
      jobname: ${{matrix.vector.jobname}}
    runs-on: ubuntu-latest
    container: ${{matrix.vector.image}}
    steps:
    - uses: actions/checkout@v1
    - run: ci/install-docker-dependencies.sh
    - run: ci/run-build-and-tests.sh
    - run: ci/print-test-failures.sh
      if: failure()
    - name: Upload failed tests' directories
      if: failure() && env.FAILED_TEST_ARTIFACTS != ''
      uses: actions/upload-artifact@v1
      with:
        name: failed-tests-${{matrix.vector.jobname}}
        path: ${{env.FAILED_TEST_ARTIFACTS}}
  static-analysis:
    env:
      jobname: StaticAnalysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: ci/install-dependencies.sh
    - run: ci/run-static-analysis.sh
  documentation:
    env:
      jobname: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: ci/install-dependencies.sh
    - run: ci/test-documentation.sh
